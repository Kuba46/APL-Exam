#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Вопрос №6. Интерфейс IEnumerable. Цикл foreach. Иерархия интерфейсов коллекций. Коллекции list, Array, ArrayList, Dictionary, Set и др.
**IEnumerable** — это базовый интерфейс в .NET, который определяет метод для перечисления коллекции. Любая коллекция, реализующая этот интерфейс, может быть использована в цикле `foreach`.

#!csharp

// Определение:
public interface IEnumerable
{
    IEnumerator GetEnumerator();
}

#!markdown

**IEnumerator** — это интерфейс, который предоставляет методы для перемещения по коллекции.
Цикл `foreach` используется для итерации по элементам коллекции, реализующей интерфейс `IEnumerable`.

#!csharp

// Пример использования:
List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };
foreach (int number in numbers)
{
    Console.WriteLine(number);
}

#!markdown

### Иерархия интерфейсов коллекций
В .NET существует иерархия интерфейсов, которая определяет различные типы коллекций и их поведение. Основные интерфейсы включают:
1. **IEnumerable<T>**: Обобщенная версия IEnumerable, предоставляющая типобезопасный способ перечисления коллекций.
2. **ICollection<T>**: Расширяет IEnumerable<T> и добавляет методы для работы с коллекцией, такие как Add, Remove, Clear и свойство Count.
3. **IList<T>**: Расширяет ICollection<T> и добавляет методы для работы с индексированными коллекциями, такие как Insert, RemoveAt и индексатор.
4. **IDictionary<TKey, TValue>**: Определяет методы для работы с коллекциями пар "ключ-значение", такие как Add, Remove, и индексатор по ключу.

#!markdown

### Коллекции:
**List<T>** — это обобщенная коллекция, представляющая динамический массив.

#!csharp

// Пример использования:
List<string> names = new List<string> { "Alice", "Bob", "Charlie" };
names.Add("David");
foreach (var name in names)
{
    Console.WriteLine(name);
}

#!markdown

**Array** — это фиксированный массив, который может содержать элементы одного типа.

#!csharp

//Пример использования:
int[] numbers = new int[] { 1, 2, 3, 4, 5 };
foreach (var number in numbers)
{
    Console.WriteLine(number);
}

#!markdown

**ArrayList** — это необобщенная коллекция, представляющая динамический массив. Используется в старых версиях .NET.

#!csharp

//Пример использования:
ArrayList list = new ArrayList { 1, "two", 3.5 };
list.Add(4);
foreach (var item in list)
{
    Console.WriteLine(item);
}

#!markdown

**Dictionary<TKey, TValue>** — это обобщенная коллекция, представляющая набор пар "ключ-значение".

#!csharp

// Пример использования:
Dictionary<int, string> dictionary = new Dictionary<int, string>
{
    { 1, "One" },
    { 2, "Two" }
};
dictionary.Add(3, "Three");
foreach (var kvp in dictionary)
{
    Console.WriteLine($"Key: {kvp.Key}, Value: {kvp.Value}");
}

#!markdown

**HashSet<T>** — это обобщенная коллекция, представляющая набор уникальных элементов. Она реализует интерфейсы ISet<T>, ICollection<T> и IEnumerable<T>.

#!csharp

// Пример использования:
HashSet<int> set = new HashSet<int> { 1, 2, 3 };
set.Add(4);
foreach (var item in set)
{
    Console.WriteLine(item);
}

#!markdown

Другие коллекции
1. **Queue<T>**: Очередь, работающая по принципу FIFO (First In, First Out).
2. **Stack<T>**: Стек, работающий по принципу LIFO (Last In, First Out).
3. **SortedList<TKey, TValue>**: Отсортированный список пар "ключ-значение".
4. **LinkedList<T>**: Двусвязный список.
